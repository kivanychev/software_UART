
MySerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000056c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dd  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00000fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058d  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000385  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_InitUSART0>:
//==========================================================================================
// IMPLEMENTATION
//==========================================================================================

void UART_InitUSART0()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    UBRR0 = MYUBRR;
  ae:	84 ec       	ldi	r24, 0xC4	; 196
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	27 e6       	ldi	r18, 0x67	; 103
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	31 83       	std	Z+1, r19	; 0x01
  ba:	20 83       	st	Z, r18
    UCSR0A = 0;
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	10 82       	st	Z, r1
    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
  c4:	81 ec       	ldi	r24, 0xC1	; 193
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	28 e9       	ldi	r18, 0x98	; 152
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ce:	82 ec       	ldi	r24, 0xC2	; 194
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	26 e0       	ldi	r18, 0x06	; 6
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
}
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <ReadCallback>:
//-----------------------------------------------------
// Sample call-back function for collecting
// received bytes
//-----------------------------------------------------
void ReadCallback(unsigned char c)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	1f 92       	push	r1
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
    // Resend via USART to PC
    UDR0 = c;
  ec:	86 ec       	ldi	r24, 0xC6	; 198
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	29 81       	ldd	r18, Y+1	; 0x01
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
}
  f6:	00 00       	nop
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <main>:
//-----------------------------------------------------
// Program entry point
// Test UART
//-----------------------------------------------------
int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	00 d0       	rcall	.+0      	; 0x106 <main+0x6>
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x8>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
    
    char *heloString = "Hello\r\n";
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	8b 83       	std	Y+3, r24	; 0x03
    int ind = 0;
 114:	1a 82       	std	Y+2, r1	; 0x02
 116:	19 82       	std	Y+1, r1	; 0x01

    UART_InitUSART0();
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_InitUSART0>
    UART_Init(ReadCallback);
 11c:	80 e7       	ldi	r24, 0x70	; 112
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Init>
        
    while(heloString[ind] != '\0')
 124:	12 c0       	rjmp	.+36     	; 0x14a <main+0x4a>
    {
        while(UART_SendByte(heloString[ind]) != UART_OK)
 126:	00 00       	nop
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	2b 81       	ldd	r18, Y+3	; 0x03
 12e:	3c 81       	ldd	r19, Y+4	; 0x04
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	0e 94 47 01 	call	0x28e	; 0x28e <UART_SendByte>
 13c:	88 23       	and	r24, r24
 13e:	a1 f7       	brne	.-24     	; 0x128 <main+0x28>
            ;   // Wait for UART to be ready for sending
            
        ind++;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
    int ind = 0;

    UART_InitUSART0();
    UART_Init(ReadCallback);
        
    while(heloString[ind] != '\0')
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	2b 81       	ldd	r18, Y+3	; 0x03
 150:	3c 81       	ldd	r19, Y+4	; 0x04
 152:	82 0f       	add	r24, r18
 154:	93 1f       	adc	r25, r19
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	21 f7       	brne	.-56     	; 0x126 <main+0x26>
    }

    /* Replace with your application code */
    while (1)
    {
        if(canSendByte)
 15e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 162:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 166:	89 2b       	or	r24, r25
 168:	d1 f3       	breq	.-12     	; 0x15e <main+0x5e>
        {
            UDR0 = byteToSend;
 16a:	86 ec       	ldi	r24, 0xC6	; 198
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <byteToSend>
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
        	UART_SendByte(byteToSend);      // Send to BT
 176:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <byteToSend>
 17a:	0e 94 47 01 	call	0x28e	; 0x28e <UART_SendByte>
            canSendByte = FALSE;
 17e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 182:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
        }            
    }
 186:	eb cf       	rjmp	.-42     	; 0x15e <main+0x5e>

00000188 <__vector_18>:

//-----------------------------------------------------
// Resend byte to BT
//-----------------------------------------------------
ISR(USART_RX_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	byteToSend = UDR0;
 1a4:	86 ec       	ldi	r24, 0xC6	; 198
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <byteToSend>
	canSendByte = TRUE;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

}
 1bc:	00 00       	nop
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <UART_Init>:
//  Initialize UART
//  PD2 - RXD
//  PD3 - TXD
//-----------------------------------------------------
void UART_Init(TReadCallback_fp cb_fp)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <UART_Init+0x6>
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
    // Set CTC mode
    TCCR0A = (1 << WGM01);
 1e4:	84 e4       	ldi	r24, 0x44	; 68
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	22 e0       	ldi	r18, 0x02	; 2
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
    OCR0A = BAUD_9600;                      // 104.2 us
 1ee:	87 e4       	ldi	r24, 0x47	; 71
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2f ec       	ldi	r18, 0xCF	; 207
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
    TIMSK0 = (1 << OCIE0A);
 1f8:	8e e6       	ldi	r24, 0x6E	; 110
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	22 e0       	ldi	r18, 0x02	; 2
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18

    PORTD |= (1 << TXPIN);                  // Set silence at TX
 202:	8b e2       	ldi	r24, 0x2B	; 43
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	2b e2       	ldi	r18, 0x2B	; 43
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	20 81       	ld	r18, Z
 20e:	28 60       	ori	r18, 0x08	; 8
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
    PORTD |= (1 << RXPIN);                  // Set pull-up
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2b e2       	ldi	r18, 0x2B	; 43
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	24 60       	ori	r18, 0x04	; 4
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18

    DDRD |= (1 << TXPIN);                   // Set as output
 226:	8a e2       	ldi	r24, 0x2A	; 42
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	2a e2       	ldi	r18, 0x2A	; 42
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	28 60       	ori	r18, 0x08	; 8
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
    DDRD &= (0xFF - (1 << RXPIN));          // Set as input
 238:	8a e2       	ldi	r24, 0x2A	; 42
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2a e2       	ldi	r18, 0x2A	; 42
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	2b 7f       	andi	r18, 0xFB	; 251
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18

    uart_current_bit_position = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    uart_mode = MODE_READY;
 250:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <uart_mode>
    uart_stage = STAGE_WAIT;
 254:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_stage>
    uart_received_byte = 0;
 258:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <uart_received_byte>
    uart_byte_to_send = 0;
 25c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <uart_byte_to_send>

    // COnfigure INT0 for triggering start bit
    EICRA = (1 << ISC01);
 260:	89 e6       	ldi	r24, 0x69	; 105
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	22 e0       	ldi	r18, 0x02	; 2
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
    EIMSK = (1 << INT0);
 26a:	8d e3       	ldi	r24, 0x3D	; 61
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18

    callback_pointer = cb_fp;
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <callback_pointer+0x1>
 27c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <callback_pointer>

    sei();
 280:	78 94       	sei
}
 282:	00 00       	nop
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <UART_SendByte>:

//-----------------------------------------------------
// Sends byte over UART
//-----------------------------------------------------
unsigned char UART_SendByte(unsigned char byte)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	1f 92       	push	r1
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	89 83       	std	Y+1, r24	; 0x01
    uart_byte_to_send = byte;
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <uart_byte_to_send>

    if(uart_mode != MODE_READY)
 2a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart_mode>
 2a4:	88 23       	and	r24, r24
 2a6:	11 f0       	breq	.+4      	; 0x2ac <UART_SendByte+0x1e>
    {
        return UART_BUSY;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	15 c0       	rjmp	.+42     	; 0x2d6 <UART_SendByte+0x48>
    }

    uart_mode = MODE_SEND;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <uart_mode>
    uart_stage = STAGE_WAIT;
 2b2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_stage>
    
    StartTimer();
 2b6:	85 e4       	ldi	r24, 0x45	; 69
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	22 e0       	ldi	r18, 0x02	; 2
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	86 e4       	ldi	r24, 0x46	; 70
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2e ec       	ldi	r18, 0xCE	; 206
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
    
    while(uart_mode != MODE_READY)
 2ca:	00 00       	nop
 2cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart_mode>
 2d0:	88 23       	and	r24, r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <UART_SendByte+0x3e>
        ;
        
    return UART_OK;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
}
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <__vector_14>:

//-----------------------------------------------------
// SW UART timer handler
//-----------------------------------------------------
ISR(TIMER0_COMPA_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	1f 92       	push	r1
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
    unsigned char portPins;
    
    switch(uart_mode)
 30c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart_mode>
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	91 05       	cpc	r25, r1
 318:	09 f4       	brne	.+2      	; 0x31c <__vector_14+0x3e>
 31a:	6a c0       	rjmp	.+212    	; 0x3f0 <__vector_14+0x112>
 31c:	02 97       	sbiw	r24, 0x02	; 2
 31e:	09 f0       	breq	.+2      	; 0x322 <__vector_14+0x44>
            }

            break;
        
        default:
            break;
 320:	d0 c0       	rjmp	.+416    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
    unsigned char portPins;
    
    switch(uart_mode)
    {
        case MODE_RECEIVE:
            switch(uart_stage)
 322:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <uart_stage>
 326:	88 2f       	mov	r24, r24
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	b1 f0       	breq	.+44     	; 0x35c <__vector_14+0x7e>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	91 05       	cpc	r25, r1
 334:	2c f4       	brge	.+10     	; 0x340 <__vector_14+0x62>
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	51 f0       	breq	.+20     	; 0x34e <__vector_14+0x70>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	59 f0       	breq	.+22     	; 0x354 <__vector_14+0x76>
                    callback_pointer(uart_received_byte);
                    StopTimer();
                    break;

                default:
                    break;
 33e:	57 c0       	rjmp	.+174    	; 0x3ee <__vector_14+0x110>
    unsigned char portPins;
    
    switch(uart_mode)
    {
        case MODE_RECEIVE:
            switch(uart_stage)
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	81 f1       	breq	.+96     	; 0x3a6 <__vector_14+0xc8>
 346:	04 97       	sbiw	r24, 0x04	; 4
 348:	09 f4       	brne	.+2      	; 0x34c <__vector_14+0x6e>
 34a:	3f c0       	rjmp	.+126    	; 0x3ca <__vector_14+0xec>
                    callback_pointer(uart_received_byte);
                    StopTimer();
                    break;

                default:
                    break;
 34c:	50 c0       	rjmp	.+160    	; 0x3ee <__vector_14+0x110>
    {
        case MODE_RECEIVE:
            switch(uart_stage)
            {
                case STAGE_WAIT:
                    uart_current_bit_position = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    // Fall through as we already receiver start bit signal from INT0
            
                    case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>
                    break;
 35a:	49 c0       	rjmp	.+146    	; 0x3ee <__vector_14+0x110>

                case STAGE_DATA_BITS:
                    portPins = PIND;
 35c:	89 e2       	ldi	r24, 0x29	; 41
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	89 83       	std	Y+1, r24	; 0x01
            
                    if( (portPins & (1 << RXPIN)) != 0)
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	84 70       	andi	r24, 0x04	; 4
 36e:	99 27       	eor	r25, r25
 370:	89 2b       	or	r24, r25
 372:	39 f0       	breq	.+14     	; 0x382 <__vector_14+0xa4>
                    {
                        // Got '1'
                        uart_received_byte |= uart_current_bit_position;
 374:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 378:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uart_received_byte>
 37c:	89 2b       	or	r24, r25
 37e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uart_received_byte>
                    }
            
                    uart_current_bit_position = (uart_current_bit_position << 1);
 382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 386:	88 0f       	add	r24, r24
 388:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 390:	88 23       	and	r24, r24
 392:	61 f5       	brne	.+88     	; 0x3ec <__vector_14+0x10e>
                    {
                        // Finished receiving
                        uart_stage = STAGE_STOP_BIT;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>
                        // Unlock INT0 for next reception
                        EIMSK = (1 << INT0);
 39a:	8d e3       	ldi	r24, 0x3D	; 61
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
                    }


                    break;
 3a4:	23 c0       	rjmp	.+70     	; 0x3ec <__vector_14+0x10e>

                case STAGE_STOP_BIT:
                    portPins = PIND;
 3a6:	89 e2       	ldi	r24, 0x29	; 41
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fc 01       	movw	r30, r24
 3ac:	80 81       	ld	r24, Z
 3ae:	89 83       	std	Y+1, r24	; 0x01

                    if( (portPins & (1 << RXPIN)) == 0)
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	88 2f       	mov	r24, r24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	84 70       	andi	r24, 0x04	; 4
 3b8:	99 27       	eor	r25, r25
 3ba:	89 2b       	or	r24, r25
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <__vector_14+0xe8>
                    {
                        // Got '0'
                        receive_state = UART_ERROR_STOPBIT;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <receive_state>
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <__vector_14+0xec>
                    }
                    else
                    {
                        receive_state = UART_OK;
 3c6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <receive_state>
                    }
            
                    // Fall through as we reached stop bit time

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 3ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_stage>
                    uart_mode = MODE_READY;
 3ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <uart_mode>
            
                    callback_pointer(uart_received_byte);
 3d2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <callback_pointer>
 3d6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <callback_pointer+0x1>
 3da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uart_received_byte>
 3de:	f9 01       	movw	r30, r18
 3e0:	09 95       	icall
                    StopTimer();
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	10 82       	st	Z, r1
                    break;
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <__vector_14+0x110>
                        // Unlock INT0 for next reception
                        EIMSK = (1 << INT0);
                    }


                    break;
 3ec:	00 00       	nop
                default:
                    break;

            }

            break;
 3ee:	69 c0       	rjmp	.+210    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

        case MODE_SEND:
            switch(uart_stage)
 3f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <uart_stage>
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	91 05       	cpc	r25, r1
 3fc:	19 f1       	breq	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	91 05       	cpc	r25, r1
 402:	2c f4       	brge	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	59 f0       	breq	.+22     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	c9 f0       	breq	.+50     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

                    StopTimer();
                    break;

                default:
                    break;
 40c:	59 c0       	rjmp	.+178    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
            }

            break;

        case MODE_SEND:
            switch(uart_stage)
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	91 05       	cpc	r25, r1
 412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	3e c0       	rjmp	.+124    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 416:	04 97       	sbiw	r24, 0x04	; 4
 418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	48 c0       	rjmp	.+144    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>

                    StopTimer();
                    break;

                default:
                    break;
 41c:	51 c0       	rjmp	.+162    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>

        case MODE_SEND:
            switch(uart_stage)
            {
                case STAGE_WAIT:
                    PORTD &= (0xFF - (1 << TXPIN));
 41e:	8b e2       	ldi	r24, 0x2B	; 43
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	2b e2       	ldi	r18, 0x2B	; 43
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	20 81       	ld	r18, Z
 42a:	27 7f       	andi	r18, 0xF7	; 247
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
                    uart_stage = STAGE_START_BIT;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>
                    uart_current_bit_position = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    break;
 43c:	41 c0       	rjmp	.+130    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>

                case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>

                    // Fall Through!
            
                case STAGE_DATA_BITS:
                    if( (uart_byte_to_send & uart_current_bit_position) != 0)
 444:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <uart_byte_to_send>
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44c:	89 23       	and	r24, r25
 44e:	88 23       	and	r24, r24
 450:	51 f0       	breq	.+20     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                    {
                        PORTD |= (1 << TXPIN);  // Set '1'
 452:	8b e2       	ldi	r24, 0x2B	; 43
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	2b e2       	ldi	r18, 0x2B	; 43
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	28 60       	ori	r18, 0x08	; 8
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
 464:	09 c0       	rjmp	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
                    }
                    else
                    {
                        PORTD &= (0xFF - (1 << TXPIN)); // Set '0'
 466:	8b e2       	ldi	r24, 0x2B	; 43
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	2b e2       	ldi	r18, 0x2B	; 43
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	27 7f       	andi	r18, 0xF7	; 247
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
                    }

                    uart_current_bit_position = (uart_current_bit_position << 1);
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47c:	88 0f       	add	r24, r24
 47e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 482:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 486:	88 23       	and	r24, r24
 488:	d1 f4       	brne	.+52     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
                    {
                        uart_stage = STAGE_STOP_BIT;
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>
                    }

                    break;
 490:	16 c0       	rjmp	.+44     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

                case STAGE_STOP_BIT:
                    PORTD |= (1 << TXPIN);  // Set '1' as Stop bit
 492:	8b e2       	ldi	r24, 0x2B	; 43
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	2b e2       	ldi	r18, 0x2B	; 43
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	28 60       	ori	r18, 0x08	; 8
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
                    uart_stage = STAGE_FINISH;
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart_stage>
                    break;
 4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 4ac:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_stage>
                    uart_mode = MODE_READY;
 4b0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <uart_mode>

                    StopTimer();
 4b4:	85 e4       	ldi	r24, 0x45	; 69
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	10 82       	st	Z, r1
                    break;
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
                    if(uart_current_bit_position == 0)
                    {
                        uart_stage = STAGE_STOP_BIT;
                    }

                    break;
 4be:	00 00       	nop
                default:
                    break;

            }

            break;
 4c0:	00 00       	nop
        
        default:
            break;

    }
}
 4c2:	00 00       	nop
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__vector_1>:
// INT0 handle
// Triggers for falling edge as the start bit
// Starts data reception
//-----------------------------------------------------
ISR(INT0_vect)
{
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
    if(uart_mode == MODE_READY)
 50e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart_mode>
 512:	88 23       	and	r24, r24
 514:	d1 f4       	brne	.+52     	; 0x54a <__vector_1+0x5c>
    {
        
        // Lock INT0 interrupt.
        // It will be unlocked on STAGE_FINISH for MODE_RECEIVE
        EIMSK &= (0xff - (1 << INT0));
 516:	8d e3       	ldi	r24, 0x3D	; 61
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2d e3       	ldi	r18, 0x3D	; 61
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	f9 01       	movw	r30, r18
 520:	20 81       	ld	r18, Z
 522:	2e 7f       	andi	r18, 0xFE	; 254
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
        
        uart_mode = MODE_RECEIVE;
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <uart_mode>
        uart_stage = STAGE_WAIT;
 52e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart_stage>
        
        uart_received_byte = 0;
 532:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <uart_received_byte>
        
        StartTimer();
 536:	85 e4       	ldi	r24, 0x45	; 69
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	22 e0       	ldi	r18, 0x02	; 2
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	86 e4       	ldi	r24, 0x46	; 70
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2e ec       	ldi	r18, 0xCE	; 206
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
        
    }
}
 54a:	00 00       	nop
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
