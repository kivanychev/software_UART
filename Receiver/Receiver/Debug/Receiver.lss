
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089b  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049c  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000146  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 00 	call	0xca	; 0xca <main>
  9e:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SW_UART_ReadCallback>:


void SW_UART_ReadCallback(unsigned char byte)
{
    // Send byte from SW UART to USART
    UDR0 = byte;
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	08 95       	ret

000000ac <UART_InitUSART0>:
// IMPLEMENTATION
//==========================================================================================

void UART_InitUSART0()
{
    UBRR0 = MYUBRR;
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0A = 0;
  b8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c8:	08 95       	ret

000000ca <main>:



int main(void)
{
    UART_InitUSART0();
  ca:	0e 94 56 00 	call	0xac	; 0xac <UART_InitUSART0>
    UART_Init(SW_UART_ReadCallback);
  ce:	83 e5       	ldi	r24, 0x53	; 83
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_Init>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0xc>

000000d8 <UART_Init>:
    
    while(uart_mode != MODE_READY)
        ;
        
    return UART_OK;
}
  d8:	22 e0       	ldi	r18, 0x02	; 2
  da:	24 bd       	out	0x24, r18	; 36
  dc:	3f ec       	ldi	r19, 0xCF	; 207
  de:	37 bd       	out	0x27, r19	; 39
  e0:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  e4:	5b 9a       	sbi	0x0b, 3	; 11
  e6:	5a 9a       	sbi	0x0b, 2	; 11
  e8:	53 9a       	sbi	0x0a, 3	; 10
  ea:	52 98       	cbi	0x0a, 2	; 10
  ec:	31 e0       	ldi	r19, 0x01	; 1
  ee:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <__data_start>
  f2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart_mode>
  f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <uart_stage>
  fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_received_byte>
  fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart_byte_to_send>
 102:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 106:	3d bb       	out	0x1d, r19	; 29
 108:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <callback_pointer+0x1>
 10c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <callback_pointer>
 110:	78 94       	sei
 112:	08 95       	ret

00000114 <__vector_14>:

//-----------------------------------------------------
// SW UART timer handler
//-----------------------------------------------------
ISR(TIMER0_COMPA_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
    unsigned char portPins;
    
    switch(uart_mode)
 136:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uart_mode>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	09 f4       	brne	.+2      	; 0x140 <__vector_14+0x2c>
 13e:	46 c0       	rjmp	.+140    	; 0x1cc <__vector_14+0xb8>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	09 f0       	breq	.+2      	; 0x146 <__vector_14+0x32>
 144:	7c c0       	rjmp	.+248    	; 0x23e <__vector_14+0x12a>
    {
        case MODE_RECEIVE:
            switch(uart_stage)
 146:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <uart_stage>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	91 f0       	breq	.+36     	; 0x172 <__vector_14+0x5e>
 14e:	28 f4       	brcc	.+10     	; 0x15a <__vector_14+0x46>
 150:	88 23       	and	r24, r24
 152:	41 f0       	breq	.+16     	; 0x164 <__vector_14+0x50>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	49 f0       	breq	.+18     	; 0x16a <__vector_14+0x56>
 158:	72 c0       	rjmp	.+228    	; 0x23e <__vector_14+0x12a>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <__vector_14+0x8e>
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	41 f1       	breq	.+80     	; 0x1b2 <__vector_14+0x9e>
 162:	6d c0       	rjmp	.+218    	; 0x23e <__vector_14+0x12a>
            {
                case STAGE_WAIT:
                    uart_current_bit_position = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    // Fall through as we already receiver start bit signal from INT0
            
                    case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>
                    break;
 170:	66 c0       	rjmp	.+204    	; 0x23e <__vector_14+0x12a>

                case STAGE_DATA_BITS:
                    portPins = PIND;
            
                    if( (portPins & (1 << RXPIN)) != 0)
 172:	4a 9b       	sbis	0x09, 2	; 9
 174:	07 c0       	rjmp	.+14     	; 0x184 <__vector_14+0x70>
                    {
                        // Got '1'
                        uart_received_byte |= uart_current_bit_position;
 176:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 17a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_received_byte>
 17e:	89 2b       	or	r24, r25
 180:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <uart_received_byte>
                    }
            
                    uart_current_bit_position = (uart_current_bit_position << 1);
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 188:	88 0f       	add	r24, r24
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 192:	81 11       	cpse	r24, r1
 194:	54 c0       	rjmp	.+168    	; 0x23e <__vector_14+0x12a>
                    {
                        // Finished receiving
                        uart_stage = STAGE_STOP_BIT;
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>
                        // Unlock INT0 for next reception
                        EIMSK = (1 << INT0);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	8d bb       	out	0x1d, r24	; 29
 1a0:	4e c0       	rjmp	.+156    	; 0x23e <__vector_14+0x12a>
                    break;

                case STAGE_STOP_BIT:
                    portPins = PIND;

                    if( (portPins & (1 << RXPIN)) == 0)
 1a2:	4a 99       	sbic	0x09, 2	; 9
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <__vector_14+0x9a>
                    {
                        // Got '0'
                        receive_state = UART_ERROR_STOPBIT;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <__vector_14+0x9e>
                    }
                    else
                    {
                        receive_state = UART_OK;
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
                    }
            
                    // Fall through as we reached stop bit time

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 1b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <uart_stage>
                    uart_mode = MODE_READY;
 1b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart_mode>
            
                    callback_pointer(uart_received_byte);
 1ba:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart_received_byte>
 1be:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <callback_pointer>
 1c2:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <callback_pointer+0x1>
 1c6:	09 95       	icall
                    StopTimer();
 1c8:	15 bc       	out	0x25, r1	; 37
                    break;
 1ca:	39 c0       	rjmp	.+114    	; 0x23e <__vector_14+0x12a>
            }

            break;

        case MODE_SEND:
            switch(uart_stage)
 1cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <uart_stage>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	a9 f0       	breq	.+42     	; 0x1fe <__vector_14+0xea>
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <__vector_14+0xcc>
 1d6:	88 23       	and	r24, r24
 1d8:	41 f0       	breq	.+16     	; 0x1ea <__vector_14+0xd6>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	69 f0       	breq	.+26     	; 0x1f8 <__vector_14+0xe4>
 1de:	2f c0       	rjmp	.+94     	; 0x23e <__vector_14+0x12a>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	19 f1       	breq	.+70     	; 0x22a <__vector_14+0x116>
 1e4:	84 30       	cpi	r24, 0x04	; 4
 1e6:	31 f1       	breq	.+76     	; 0x234 <__vector_14+0x120>
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <__vector_14+0x12a>
            {
                case STAGE_WAIT:
                    PORTD &= (0xFF - (1 << TXPIN));
 1ea:	5b 98       	cbi	0x0b, 3	; 11
                    uart_stage = STAGE_START_BIT;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>
                    uart_current_bit_position = 1;
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    break;
 1f6:	23 c0       	rjmp	.+70     	; 0x23e <__vector_14+0x12a>

                case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>

                    // Fall Through!
            
                case STAGE_DATA_BITS:
                    if( (uart_byte_to_send & uart_current_bit_position) != 0)
 1fe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <uart_byte_to_send>
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	89 23       	and	r24, r25
 208:	11 f0       	breq	.+4      	; 0x20e <__vector_14+0xfa>
                    {
                        PORTD |= (1 << TXPIN);  // Set '1'
 20a:	5b 9a       	sbi	0x0b, 3	; 11
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__vector_14+0xfc>
                    }
                    else
                    {
                        PORTD &= (0xFF - (1 << TXPIN)); // Set '0'
 20e:	5b 98       	cbi	0x0b, 3	; 11
                    }

                    uart_current_bit_position = (uart_current_bit_position << 1);
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 214:	88 0f       	add	r24, r24
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21e:	81 11       	cpse	r24, r1
 220:	0e c0       	rjmp	.+28     	; 0x23e <__vector_14+0x12a>
                    {
                        uart_stage = STAGE_STOP_BIT;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>
 228:	0a c0       	rjmp	.+20     	; 0x23e <__vector_14+0x12a>
                    }

                    break;

                case STAGE_STOP_BIT:
                    PORTD |= (1 << TXPIN);  // Set '1' as Stop bit
 22a:	5b 9a       	sbi	0x0b, 3	; 11
                    uart_stage = STAGE_FINISH;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_stage>
                    break;
 232:	05 c0       	rjmp	.+10     	; 0x23e <__vector_14+0x12a>

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 234:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <uart_stage>
                    uart_mode = MODE_READY;
 238:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart_mode>

                    StopTimer();
 23c:	15 bc       	out	0x25, r1	; 37
        
        default:
            break;

    }
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_1>:
// INT0 handle
// Triggers for falling edge as the start bit
// Starts data reception
//-----------------------------------------------------
ISR(INT0_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
    if(uart_mode == MODE_READY)
 26c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uart_mode>
 270:	81 11       	cpse	r24, r1
 272:	0b c0       	rjmp	.+22     	; 0x28a <__vector_1+0x2a>
    {
        
        // Lock INT0 interrupt.
        // It will be unlocked on STAGE_FINISH for MODE_RECEIVE
        EIMSK &= (0xff - (1 << INT0));
 274:	e8 98       	cbi	0x1d, 0	; 29
        
        uart_mode = MODE_RECEIVE;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <uart_mode>
        uart_stage = STAGE_WAIT;
 27c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <uart_stage>
        
        uart_received_byte = 0;
 280:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart_received_byte>
        
        StartTimer();
 284:	85 bd       	out	0x25, r24	; 37
 286:	8e ec       	ldi	r24, 0xCE	; 206
 288:	86 bd       	out	0x26, r24	; 38
        
    }
}
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
