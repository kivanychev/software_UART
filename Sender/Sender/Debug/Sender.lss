
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800116  00800116  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c5  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077f  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017d  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SW_UART_ReadCallback>:
// IMPLEMENTATION
//==========================================================================================


void SW_UART_ReadCallback(unsigned char byte)
{
  a6:	08 95       	ret

000000a8 <main>:
}


int main(void)
{
    UART_Init(SW_UART_ReadCallback);
  a8:	83 e5       	ldi	r24, 0x53	; 83
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Init>
    
    char byteToSend;
    char *str = "Hello from sender\r\n";
    unsigned short ind = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
    
    while (1) 
    {
        byteToSend = str[ind];
  b4:	fe 01       	movw	r30, r28
  b6:	ef 5f       	subi	r30, 0xFF	; 255
  b8:	fe 4f       	sbci	r31, 0xFE	; 254
  ba:	80 81       	ld	r24, Z
        ind++;
  bc:	21 96       	adiw	r28, 0x01	; 1
        if( str[ind] == '\0')
  be:	fe 01       	movw	r30, r28
  c0:	ef 5f       	subi	r30, 0xFF	; 255
  c2:	fe 4f       	sbci	r31, 0xFE	; 254
  c4:	90 81       	ld	r25, Z
  c6:	91 11       	cpse	r25, r1
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x26>
        {
            ind = 0;
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
        }
        
        UART_SendByte(byteToSend);
  ce:	0e 94 88 00 	call	0x110	; 0x110 <UART_SendByte>
    }
  d2:	f0 cf       	rjmp	.-32     	; 0xb4 <main+0xc>

000000d4 <UART_Init>:
//  PD3 - TXD
//-----------------------------------------------------
void UART_Init(TReadCallback_fp cb_fp)
{
    // Set CTC mode
    TCCR0A = (1 << WGM01);
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	24 bd       	out	0x24, r18	; 36
    OCR0A = BAUD_9600;                      // 104.2 us
  d8:	3f ec       	ldi	r19, 0xCF	; 207
  da:	37 bd       	out	0x27, r19	; 39
    TIMSK0 = (1 << OCIE0A);
  dc:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

    PORTD |= (1 << TXPIN);                  // Set silence at TX
  e0:	5b 9a       	sbi	0x0b, 3	; 11
    PORTD |= (1 << RXPIN);                  // Set pull-up
  e2:	5a 9a       	sbi	0x0b, 2	; 11

    DDRD |= (1 << TXPIN);                   // Set as output
  e4:	53 9a       	sbi	0x0a, 3	; 10
    DDRD &= (0xFF - (1 << RXPIN));          // Set as input
  e6:	52 98       	cbi	0x0a, 2	; 10

    uart_current_bit_position = 1;
  e8:	31 e0       	ldi	r19, 0x01	; 1
  ea:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <__data_start>
    uart_mode = MODE_READY;
  ee:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <uart_mode>
    uart_stage = STAGE_WAIT;
  f2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_stage>
    uart_received_byte = 0;
  f6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <uart_received_byte>
    uart_byte_to_send = 0;
  fa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <uart_byte_to_send>

    // COnfigure INT0 for triggering start bit
    EICRA = (1 << ISC01);
  fe:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = (1 << INT0);
 102:	3d bb       	out	0x1d, r19	; 29

    callback_pointer = cb_fp;
 104:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <callback_pointer+0x1>
 108:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <callback_pointer>

    sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <UART_SendByte>:
//-----------------------------------------------------
// Sends byte over UART
//-----------------------------------------------------
unsigned char UART_SendByte(unsigned char byte)
{
    uart_byte_to_send = byte;
 110:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uart_byte_to_send>

    if(uart_mode != MODE_READY)
 114:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uart_mode>
 118:	81 11       	cpse	r24, r1
 11a:	0e c0       	rjmp	.+28     	; 0x138 <UART_SendByte+0x28>
    {
        return UART_BUSY;
    }

    uart_mode = MODE_SEND;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <uart_mode>
    uart_stage = STAGE_WAIT;
 122:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_stage>
    
    StartTimer();
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	85 bd       	out	0x25, r24	; 37
 12a:	8e ec       	ldi	r24, 0xCE	; 206
 12c:	86 bd       	out	0x26, r24	; 38
    
    while(uart_mode != MODE_READY)
 12e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uart_mode>
 132:	81 11       	cpse	r24, r1
 134:	fc cf       	rjmp	.-8      	; 0x12e <UART_SendByte+0x1e>
 136:	08 95       	ret
{
    uart_byte_to_send = byte;

    if(uart_mode != MODE_READY)
    {
        return UART_BUSY;
 138:	82 e0       	ldi	r24, 0x02	; 2
    
    while(uart_mode != MODE_READY)
        ;
        
    return UART_OK;
}
 13a:	08 95       	ret

0000013c <__vector_14>:

//-----------------------------------------------------
// SW UART timer handler
//-----------------------------------------------------
ISR(TIMER0_COMPA_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
    unsigned char portPins;
    
    switch(uart_mode)
 15e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uart_mode>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	09 f4       	brne	.+2      	; 0x168 <__vector_14+0x2c>
 166:	46 c0       	rjmp	.+140    	; 0x1f4 <__vector_14+0xb8>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	09 f0       	breq	.+2      	; 0x16e <__vector_14+0x32>
 16c:	7c c0       	rjmp	.+248    	; 0x266 <__vector_14+0x12a>
    {
        case MODE_RECEIVE:
            switch(uart_stage)
 16e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uart_stage>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 f0       	breq	.+36     	; 0x19a <__vector_14+0x5e>
 176:	28 f4       	brcc	.+10     	; 0x182 <__vector_14+0x46>
 178:	88 23       	and	r24, r24
 17a:	41 f0       	breq	.+16     	; 0x18c <__vector_14+0x50>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	49 f0       	breq	.+18     	; 0x192 <__vector_14+0x56>
 180:	72 c0       	rjmp	.+228    	; 0x266 <__vector_14+0x12a>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	11 f1       	breq	.+68     	; 0x1ca <__vector_14+0x8e>
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	41 f1       	breq	.+80     	; 0x1da <__vector_14+0x9e>
 18a:	6d c0       	rjmp	.+218    	; 0x266 <__vector_14+0x12a>
            {
                case STAGE_WAIT:
                    uart_current_bit_position = 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    // Fall through as we already receiver start bit signal from INT0
            
                    case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>
                    break;
 198:	66 c0       	rjmp	.+204    	; 0x266 <__vector_14+0x12a>

                case STAGE_DATA_BITS:
                    portPins = PIND;
            
                    if( (portPins & (1 << RXPIN)) != 0)
 19a:	4a 9b       	sbis	0x09, 2	; 9
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <__vector_14+0x70>
                    {
                        // Got '1'
                        uart_received_byte |= uart_current_bit_position;
 19e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1a2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <uart_received_byte>
 1a6:	89 2b       	or	r24, r25
 1a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uart_received_byte>
                    }
            
                    uart_current_bit_position = (uart_current_bit_position << 1);
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	88 0f       	add	r24, r24
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ba:	81 11       	cpse	r24, r1
 1bc:	54 c0       	rjmp	.+168    	; 0x266 <__vector_14+0x12a>
                    {
                        // Finished receiving
                        uart_stage = STAGE_STOP_BIT;
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>
                        // Unlock INT0 for next reception
                        EIMSK = (1 << INT0);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	8d bb       	out	0x1d, r24	; 29
 1c8:	4e c0       	rjmp	.+156    	; 0x266 <__vector_14+0x12a>
                    break;

                case STAGE_STOP_BIT:
                    portPins = PIND;

                    if( (portPins & (1 << RXPIN)) == 0)
 1ca:	4a 99       	sbic	0x09, 2	; 9
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__vector_14+0x9a>
                    {
                        // Got '0'
                        receive_state = UART_ERROR_STOPBIT;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_14+0x9e>
                    }
                    else
                    {
                        receive_state = UART_OK;
 1d6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
                    }
            
                    // Fall through as we reached stop bit time

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 1da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_stage>
                    uart_mode = MODE_READY;
 1de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <uart_mode>
            
                    callback_pointer(uart_received_byte);
 1e2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <uart_received_byte>
 1e6:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <callback_pointer>
 1ea:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <callback_pointer+0x1>
 1ee:	09 95       	icall
                    StopTimer();
 1f0:	15 bc       	out	0x25, r1	; 37
                    break;
 1f2:	39 c0       	rjmp	.+114    	; 0x266 <__vector_14+0x12a>
            }

            break;

        case MODE_SEND:
            switch(uart_stage)
 1f4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uart_stage>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	a9 f0       	breq	.+42     	; 0x226 <__vector_14+0xea>
 1fc:	28 f4       	brcc	.+10     	; 0x208 <__vector_14+0xcc>
 1fe:	88 23       	and	r24, r24
 200:	41 f0       	breq	.+16     	; 0x212 <__vector_14+0xd6>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	69 f0       	breq	.+26     	; 0x220 <__vector_14+0xe4>
 206:	2f c0       	rjmp	.+94     	; 0x266 <__vector_14+0x12a>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	19 f1       	breq	.+70     	; 0x252 <__vector_14+0x116>
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	31 f1       	breq	.+76     	; 0x25c <__vector_14+0x120>
 210:	2a c0       	rjmp	.+84     	; 0x266 <__vector_14+0x12a>
            {
                case STAGE_WAIT:
                    PORTD &= (0xFF - (1 << TXPIN));
 212:	5b 98       	cbi	0x0b, 3	; 11
                    uart_stage = STAGE_START_BIT;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>
                    uart_current_bit_position = 1;
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                    break;
 21e:	23 c0       	rjmp	.+70     	; 0x266 <__vector_14+0x12a>

                case STAGE_START_BIT:
                    uart_stage = STAGE_DATA_BITS;
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>

                    // Fall Through!
            
                case STAGE_DATA_BITS:
                    if( (uart_byte_to_send & uart_current_bit_position) != 0)
 226:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uart_byte_to_send>
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 22e:	89 23       	and	r24, r25
 230:	11 f0       	breq	.+4      	; 0x236 <__vector_14+0xfa>
                    {
                        PORTD |= (1 << TXPIN);  // Set '1'
 232:	5b 9a       	sbi	0x0b, 3	; 11
 234:	01 c0       	rjmp	.+2      	; 0x238 <__vector_14+0xfc>
                    }
                    else
                    {
                        PORTD &= (0xFF - (1 << TXPIN)); // Set '0'
 236:	5b 98       	cbi	0x0b, 3	; 11
                    }

                    uart_current_bit_position = (uart_current_bit_position << 1);
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23c:	88 0f       	add	r24, r24
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

                    if(uart_current_bit_position == 0)
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 246:	81 11       	cpse	r24, r1
 248:	0e c0       	rjmp	.+28     	; 0x266 <__vector_14+0x12a>
                    {
                        uart_stage = STAGE_STOP_BIT;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>
 250:	0a c0       	rjmp	.+20     	; 0x266 <__vector_14+0x12a>
                    }

                    break;

                case STAGE_STOP_BIT:
                    PORTD |= (1 << TXPIN);  // Set '1' as Stop bit
 252:	5b 9a       	sbi	0x0b, 3	; 11
                    uart_stage = STAGE_FINISH;
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart_stage>
                    break;
 25a:	05 c0       	rjmp	.+10     	; 0x266 <__vector_14+0x12a>

                case STAGE_FINISH:
                    uart_stage = STAGE_WAIT;
 25c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_stage>
                    uart_mode = MODE_READY;
 260:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <uart_mode>

                    StopTimer();
 264:	15 bc       	out	0x25, r1	; 37
        
        default:
            break;

    }
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_1>:
// INT0 handle
// Triggers for falling edge as the start bit
// Starts data reception
//-----------------------------------------------------
ISR(INT0_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	8f 93       	push	r24
    if(uart_mode == MODE_READY)
 294:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uart_mode>
 298:	81 11       	cpse	r24, r1
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <__vector_1+0x2a>
    {
        
        // Lock INT0 interrupt.
        // It will be unlocked on STAGE_FINISH for MODE_RECEIVE
        EIMSK &= (0xff - (1 << INT0));
 29c:	e8 98       	cbi	0x1d, 0	; 29
        
        uart_mode = MODE_RECEIVE;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <uart_mode>
        uart_stage = STAGE_WAIT;
 2a4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart_stage>
        
        uart_received_byte = 0;
 2a8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <uart_received_byte>
        
        StartTimer();
 2ac:	85 bd       	out	0x25, r24	; 37
 2ae:	8e ec       	ldi	r24, 0xCE	; 206
 2b0:	86 bd       	out	0x26, r24	; 38
        
    }
}
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
